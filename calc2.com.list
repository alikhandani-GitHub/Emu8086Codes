EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
calc2.com -- emu8086 assembler version: 4.08  
 
[ 09/01/2023  --  07:14:48 È.Ù ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ; You may customize this and other start-up templates;
[   3]        :                                       ; The location of this template is c:\emu8086\inc\0_com_template.txt
[   4]        :                                       
[   5]        :                                       org 100h
[   6]        :                                       
[   7]        :                                       ; add your code here
[   8]        :                                       
[   9]        :                                       
[  10]        :                                       name "calc2"
[  11]        :                                       
[  12]        :                                       ; command prompt based simple calculator (+,-,*,/) for 8086.
[  13]        :                                       ; example of calculation:
[  14]        :                                       ; input 1 <- number:   10
[  15]        :                                       ; input 2 <- operator: -
[  16]        :                                       ; input 3 <- number:   5
[  17]        :                                       ; -------------------
[  18]        :                                       ;     10 - 5 = 5
[  19]        :                                       ; output  -> number:   5
[  20]        :                                       
[  21]        :                                       
[  22]        :                                       
[  23]        :                                       
[  24]        :                                       
[  25]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[  26]        :                                       ;;; this maro is copied from emu8086.inc ;;;
[  27]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[  28]        :                                       ; this macro prints a char in AL and advances
[  29]        :                                       ; the current cursor position:
[  30]        :                                       PUTC    MACRO   char
[  31]        :                                       PUSH    AX
[  32]        :                                       MOV     AL, char
[  33]        :                                       MOV     AH, 0Eh
[  34]        :                                       INT     10h
[  35]        :                                       POP     AX
[  36]        :                                       ENDM
[  37]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[  38]        :                                       
[  39]        :                                       
[  40]        :                                       
[  41]        :                                       
[  42]        :                                       
[  43]        :                                       org 100h
[  44]        :                                       
[  45]    0100: E9 71 01                              jmp start
[  46]        :                                       
[  47]        :                                       
[  48]        :                                       ; define variables:
[  49]        :                                       
[  50]    0103: 6E 6F 74 65 3A 20 63 61 6C 63 75 6C   msg0 db "note: calculator works with integer values only.",0Dh,0Ah
                61 74 6F 72 20 77 6F 72 6B 73 20 77 
                69 74 68 20 69 6E 74 65 67 65 72 20 
                76 61 6C 75 65 73 20 6F 6E 6C 79 2E 
                0D 0A                               
[  51]    0135: 74 6F 20 6C 65 61 72 6E 20 68 6F 77   db "to learn how to output the result of a float division see float.asm in examples",0Dh,0Ah,'$'
                20 74 6F 20 6F 75 74 70 75 74 20 74 
                68 65 20 72 65 73 75 6C 74 20 6F 66 
                20 61 20 66 6C 6F 61 74 20 64 69 76 
                69 73 69 6F 6E 20 73 65 65 20 66 6C 
                6F 61 74 2E 61 73 6D 20 69 6E 20 65 
                78 61 6D 70 6C 65 73 0D 0A 24       
[  52]    0187: 0D 0A 0D 0A 65 6E 74 65 72 20 66 69   msg1 db 0Dh,0Ah, 0Dh,0Ah, 'enter first number: $'
                72 73 74 20 6E 75 6D 62 65 72 3A 20 
                24                                  
[  53]    01A0: 65 6E 74 65 72 20 74 68 65 20 6F 70   msg2 db "enter the operator:    +  -  *  /     : $"
                65 72 61 74 6F 72 3A 20 20 20 20 2B 
                20 20 2D 20 20 2A 20 20 2F 20 20 20 
                20 3A 20 24                         
[  54]    01C8: 65 6E 74 65 72 20 73 65 63 6F 6E 64   msg3 db "enter second number: $"
                20 6E 75 6D 62 65 72 3A 20 24       
[  55]    01DE: 0D 0A 74 68 65 20 61 70 70 72 6F 78   msg4 db  0dh,0ah , 'the approximate result of my calculations is : $'
                69 6D 61 74 65 20 72 65 73 75 6C 74 
                20 6F 66 20 6D 79 20 63 61 6C 63 75 
                6C 61 74 69 6F 6E 73 20 69 73 3A 20 
                24                                  
[  56]    020F: 0D 0A 74 68 61 6E 6B 20 79 6F 75 20   msg5 db  0dh,0ah ,'thank you for using the calculator! press any key... ', 0Dh,0Ah, '$'
                66 6F 72 20 75 73 69 6E 67 20 74 68 
                65 20 63 61 6C 63 75 6C 61 74 6F 72 
                21 20 70 72 65 73 73 20 61 6E 79 20 
                6B 65 79 2E 2E 2E 20 0D 0A 24       
[  57]    0249: 77 72 6F 6E 67 20 6F 70 65 72 61 74   err1 db  "wrong operator!", 0Dh,0Ah , '$'
                6F 72 21 0D 0A 24                   
[  58]    025B: 20 61 6E 64 20 73 6F 6D 65 74 68 69   smth db  " and something.... $"
                6E 67 2E 2E 2E 2E 20 24             
[  59]        :                                       
[  60]        :                                       ; operator can be: '+','-','*','/' or 'q' to exit in the middle.
[  61]    026F: 3F                                    opr db '?'
[  62]        :                                       
[  63]        :                                       ; first and second number:
[  64]    0270: 00 00                                 num1 dw ?
[  65]    0272: 00 00                                 num2 dw ?
[  66]        :                                       
[  67]        :                                       
[  68]    0274:                                       start:
[  69]    0274: BA 03 01                              mov dx, offset msg0
[  70]    0277: B4 09                                 mov ah, 9
[  71]    0279: CD 21                                 int 21h
[  72]        :                                       
[  73]        :                                       
[  74]    027B: BA 87 01                              lea dx, msg1
[  75]    027E: B4 09                                 mov ah, 09h    ; output string at ds:dx
[  76]    0280: CD 21                                 int 21h
[  77]        :                                       
[  78]        :                                       
[  79]        :                                       ; get the multi-digit signed number
[  80]        :                                       ; from the keyboard, and store
[  81]        :                                       ; the result in cx register:
[  82]        :                                       
[  83]    0282: E8 CF 00                              call scan_num
[  84]        :                                       
[  85]        :                                       ; store first number:
[  86]    0285: 89 0E 70 02                           mov num1, cx
[  87]        :                                       
[  88]        :                                       
[  89]        :                                       
[  90]        :                                       ; new line:
[  91]    0289: 50 B0 0D B4 0E CD 10 58               putc 0Dh
[  92]    0291: 50 B0 0A B4 0E CD 10 58               putc 0Ah
[  93]        :                                       
[  94]        :                                       
[  95]        :                                       
[  96]        :                                       
[  97]    0299: BA A0 01                              lea dx, msg2
[  98]    029C: B4 09                                 mov ah, 09h     ; output string at ds:dx
[  99]    029E: CD 21                                 int 21h
[ 100]        :                                       
[ 101]        :                                       
[ 102]        :                                       ; get operator:
[ 103]    02A0: B4 01                                 mov ah, 1   ; single char input to AL.
[ 104]    02A2: CD 21                                 int 21h
[ 105]    02A4: A2 6F 02                              mov opr, al
[ 106]        :                                       
[ 107]        :                                       
[ 108]        :                                       
[ 109]        :                                       ; new line:
[ 110]    02A7: 50 B0 0D B4 0E CD 10 58               putc 0Dh
[ 111]    02AF: 50 B0 0A B4 0E CD 10 58               putc 0Ah
[ 112]        :                                       
[ 113]        :                                       
[ 114]    02B7: 80 3E 6F 02 71                        cmp opr, 'q'      ; q - exit in the middle.
[ 115]    02BC: 74 46                                 je exit
[ 116]        :                                       
[ 117]    02BE: 80 3E 6F 02 2A                        cmp opr, '*'
[ 118]    02C3: 72 38                                 jb wrong_opr
[ 119]    02C5: 80 3E 6F 02 2F                        cmp opr, '/'
[ 120]    02CA: 77 31                                 ja wrong_opr
[ 121]        :                                       
[ 122]        :                                       
[ 123]        :                                       
[ 124]        :                                       
[ 125]        :                                       
[ 126]        :                                       
[ 127]        :                                       ; output of a string at ds:dx
[ 128]    02CC: BA C8 01                              lea dx, msg3
[ 129]    02CF: B4 09                                 mov ah, 09h
[ 130]    02D1: CD 21                                 int 21h
[ 131]        :                                       
[ 132]        :                                       
[ 133]        :                                       ; get the multi-digit signed number
[ 134]        :                                       ; from the keyboard, and store
[ 135]        :                                       ; the result in cx register:
[ 136]        :                                       
[ 137]    02D3: E8 7E 00                              call scan_num
[ 138]        :                                       
[ 139]        :                                       
[ 140]        :                                       ; store second number:
[ 141]    02D6: 89 0E 72 02                           mov num2, cx
[ 142]        :                                       
[ 143]        :                                       
[ 144]        :                                       
[ 145]        :                                       
[ 146]    02DA: BA DE 01                              lea dx, msg4
[ 147]    02DD: B4 09                                 mov ah, 09h      ; output string at ds:dx
[ 148]    02DF: CD 21                                 int 21h
[ 149]        :                                       
[ 150]        :                                       
[ 151]        :                                       
[ 152]        :                                       
[ 153]        :                                       ; calculate:
[ 154]        :                                       
[ 155]        :                                       
[ 156]        :                                       
[ 157]        :                                       
[ 158]        :                                       
[ 159]    02E1: 80 3E 6F 02 2B                        cmp opr, '+'
[ 160]    02E6: 74 28                                 je do_plus
[ 161]        :                                       
[ 162]    02E8: 80 3E 6F 02 2D                        cmp opr, '-'
[ 163]    02ED: 74 2D                                 je do_minus
[ 164]        :                                       
[ 165]    02EF: 80 3E 6F 02 2A                        cmp opr, '*'
[ 166]    02F4: 74 32                                 je do_mult
[ 167]        :                                       
[ 168]    02F6: 80 3E 6F 02 2F                        cmp opr, '/'
[ 169]    02FB: 74 37                                 je do_div
[ 170]        :                                       
[ 171]        :                                       
[ 172]        :                                       ; none of the above....
[ 173]    02FD:                                       wrong_opr:
[ 174]    02FD: BA 49 02                              lea dx, err1
[ 175]    0300: B4 09                                 mov ah, 09h     ; output string at ds:dx
[ 176]    0302: CD 21                                 int 21h
[ 177]        :                                       
[ 178]        :                                       
[ 179]    0304:                                       exit:
[ 180]        :                                       ; output of a string at ds:dx
[ 181]    0304: BA 0F 02                              lea dx, msg5
[ 182]    0307: B4 09                                 mov ah, 09h
[ 183]    0309: CD 21                                 int 21h
[ 184]        :                                       
[ 185]        :                                       
[ 186]        :                                       ; wait for any key...
[ 187]    030B: B4 00                                 mov ah, 0
[ 188]    030D: CD 16                                 int 16h
[ 189]        :                                       
[ 190]        :                                       
[ 191]    030F: C3                                    ret  ; return back to os.
[ 192]        :                                       
[ 193]        :                                       
[ 194]        :                                       
[ 195]        :                                       
[ 196]        :                                       
[ 197]        :                                       
[ 198]        :                                       
[ 199]        :                                       
[ 200]        :                                       
[ 201]        :                                       
[ 202]        :                                       
[ 203]    0310:                                       do_plus:
[ 204]        :                                       
[ 205]        :                                       
[ 206]    0310: A1 70 02                              mov ax, num1
[ 207]    0313: 03 06 72 02                           add ax, num2
[ 208]    0317: E8 FB 00                              call print_num    ; print ax value.
[ 209]        :                                       
[ 210]    031A: EB E8                                 jmp exit
[ 211]        :                                       
[ 212]        :                                       
[ 213]        :                                       
[ 214]    031C:                                       do_minus:
[ 215]        :                                       
[ 216]    031C: A1 70 02                              mov ax, num1
[ 217]    031F: 2B 06 72 02                           sub ax, num2
[ 218]    0323: E8 EF 00                              call print_num    ; print ax value.
[ 219]        :                                       
[ 220]    0326: EB DC                                 jmp exit
[ 221]        :                                       
[ 222]        :                                       
[ 223]        :                                       
[ 224]        :                                       
[ 225]    0328:                                       do_mult:
[ 226]        :                                       
[ 227]    0328: A1 70 02                              mov ax, num1
[ 228]    032B: F7 2E 72 02                           imul num2 ; (dx ax) = ax * num2.
[ 229]    032F: E8 E3 00                              call print_num    ; print ax value.
[ 230]        :                                       ; dx is ignored (calc works with tiny numbers only).
[ 231]        :                                       
[ 232]    0332: EB D0                                 jmp exit
[ 233]        :                                       
[ 234]        :                                       
[ 235]        :                                       
[ 236]        :                                       
[ 237]    0334:                                       do_div:
[ 238]        :                                       ; dx is ignored (calc works with tiny integer numbers only).
[ 239]    0334: BA 00 00                              mov dx, 0
[ 240]    0337: A1 70 02                              mov ax, num1
[ 241]    033A: F7 3E 72 02                           idiv num2  ; ax = (dx ax) / num2.
[ 242]    033E: 83 FA 00                              cmp dx, 0
[ 243]    0341: 75 05                                 jnz approx
[ 244]    0343: E8 CF 00                              call print_num    ; print ax value.
[ 245]    0346: EB BC                                 jmp exit
[ 246]    0348:                                       approx:
[ 247]    0348: E8 CA 00                              call print_num    ; print ax value.
[ 248]    034B: BA 5B 02                              lea dx, smth
[ 249]    034E: B4 09                                 mov ah, 09h    ; output string at ds:dx
[ 250]    0350: CD 21                                 int 21h
[ 251]    0352: EB B0                                 jmp exit
[ 252]        :                                       
[ 253]        :                                       
[ 254]        :                                       
[ 255]        :                                       
[ 256]        :                                       
[ 257]        :                                       
[ 258]        :                                       
[ 259]        :                                       
[ 260]        :                                       
[ 261]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 262]        :                                       ;;; these functions are copied from emu8086.inc ;;;
[ 263]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 264]        :                                       
[ 265]        :                                       
[ 266]        :                                       ; gets the multi-digit SIGNED number from the keyboard,
[ 267]        :                                       ; and stores the result in CX register:
[ 268]    0354:                                       SCAN_NUM        PROC    NEAR
[ 269]    0354: 52                                    PUSH    DX
[ 270]    0355: 50                                    PUSH    AX
[ 271]    0356: 56                                    PUSH    SI
[ 272]        :                                       
[ 273]    0357: B9 00 00                              MOV     CX, 0
[ 274]        :                                       
[ 275]        :                                       ; reset flag:
[ 276]    035A: 2E C6 06 14 04 00                     MOV     CS:make_minus, 0
[ 277]        :                                       
[ 278]    0360:                                       next_digit:
[ 279]        :                                       
[ 280]        :                                       ; get char from keyboard
[ 281]        :                                       ; into AL:
[ 282]    0360: B4 00                                 MOV     AH, 00h
[ 283]    0362: CD 16                                 INT     16h
[ 284]        :                                       ; and print it:
[ 285]    0364: B4 0E                                 MOV     AH, 0Eh
[ 286]    0366: CD 10                                 INT     10h
[ 287]        :                                       
[ 288]        :                                       ; check for MINUS:
[ 289]    0368: 3C 2D                                 CMP     AL, '-'
[ 290]    036A: 74 69                                 JE      set_minus
[ 291]        :                                       
[ 292]        :                                       ; check for ENTER key:
[ 293]    036C: 3C 0D                                 CMP     AL, 0Dh  ; carriage return?
[ 294]    036E: 75 03                                 JNE     not_cr
[ 295]    0370: E9 93 00                              JMP     stop_input
[ 296]    0373:                                       not_cr:
[ 297]        :                                       
[ 298]        :                                       
[ 299]    0373: 3C 08                                 CMP     AL, 8                   ; 'BACKSPACE' pressed?
[ 300]    0375: 75 1E                                 JNE     backspace_checked
[ 301]    0377: BA 00 00                              MOV     DX, 0                   ; remove last digit by
[ 302]    037A: 8B C1                                 MOV     AX, CX                  ; division:
[ 303]    037C: 2E F7 36 89 04                        DIV     CS:ten                  ; AX = DX:AX / 10 (DX-rem).
[ 304]    0381: 8B C8                                 MOV     CX, AX
[ 305]    0383: 50 B0 20 B4 0E CD 10 58               PUTC    ' '                     ; clear position.
[ 306]    038B: 50 B0 08 B4 0E CD 10 58               PUTC    8                       ; backspace again.
[ 307]    0393: EB CB                                 JMP     next_digit
[ 308]    0395:                                       backspace_checked:
[ 309]        :                                       
[ 310]        :                                       
[ 311]        :                                       ; allow only digits:
[ 312]    0395: 3C 30                                 CMP     AL, '0'
[ 313]    0397: 73 02                                 JAE     ok_AE_0
[ 314]    0399: EB 04                                 JMP     remove_not_digit
[ 315]    039B:                                       ok_AE_0:
[ 316]    039B: 3C 39                                 CMP     AL, '9'
[ 317]    039D: 76 1A                                 JBE     ok_digit
[ 318]    039F:                                       remove_not_digit:
[ 319]    039F: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace.
[ 320]    03A7: 50 B0 20 B4 0E CD 10 58               PUTC    ' '     ; clear last entered not digit.
[ 321]    03AF: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace again.
[ 322]    03B7: EB A7                                 JMP     next_digit ; wait for next input.
[ 323]    03B9:                                       ok_digit:
[ 324]        :                                       
[ 325]        :                                       
[ 326]        :                                       ; multiply CX by 10 (first time the result is zero)
[ 327]    03B9: 50                                    PUSH    AX
[ 328]    03BA: 8B C1                                 MOV     AX, CX
[ 329]    03BC: 2E F7 26 89 04                        MUL     CS:ten                  ; DX:AX = AX*10
[ 330]    03C1: 8B C8                                 MOV     CX, AX
[ 331]    03C3: 58                                    POP     AX
[ 332]        :                                       
[ 333]        :                                       ; check if the number is too big
[ 334]        :                                       ; (result should be 16 bits)
[ 335]    03C4: 83 FA 00                              CMP     DX, 0
[ 336]    03C7: 75 19                                 JNE     too_big
[ 337]        :                                       
[ 338]        :                                       ; convert from ASCII code:
[ 339]    03C9: 2C 30                                 SUB     AL, 30h
[ 340]        :                                       
[ 341]        :                                       ; add AL to CX:
[ 342]    03CB: B4 00                                 MOV     AH, 0
[ 343]    03CD: 8B D1                                 MOV     DX, CX      ; backup, in case the result will be too big.
[ 344]    03CF: 03 C8                                 ADD     CX, AX
[ 345]    03D1: 72 0A                                 JC      too_big2    ; jump if the number is too big.
[ 346]        :                                       
[ 347]    03D3: EB 8B                                 JMP     next_digit
[ 348]        :                                       
[ 349]    03D5:                                       set_minus:
[ 350]    03D5: 2E C6 06 14 04 01                     MOV     CS:make_minus, 1
[ 351]    03DB: EB 83                                 JMP     next_digit
[ 352]        :                                       
[ 353]    03DD:                                       too_big2:
[ 354]    03DD: 8B CA                                 MOV     CX, DX      ; restore the backuped value before add.
[ 355]    03DF: BA 00 00                              MOV     DX, 0       ; DX was zero before backup!
[ 356]    03E2:                                       too_big:
[ 357]    03E2: 8B C1                                 MOV     AX, CX
[ 358]    03E4: 2E F7 36 89 04                        DIV     CS:ten  ; reverse last DX:AX = AX*10, make AX = DX:AX / 10
[ 359]    03E9: 8B C8                                 MOV     CX, AX
[ 360]    03EB: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace.
[ 361]    03F3: 50 B0 20 B4 0E CD 10 58               PUTC    ' '     ; clear last entered digit.
[ 362]    03FB: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace again.
[ 363]    0403: E9 5A FF                              JMP     next_digit ; wait for Enter/Backspace.
[ 364]        :                                       
[ 365]        :                                       
[ 366]    0406:                                       stop_input:
[ 367]        :                                       ; check flag:
[ 368]    0406: 2E 80 3E 14 04 00                     CMP     CS:make_minus, 0
[ 369]    040C: 74 02                                 JE      not_minus
[ 370]    040E: F7 D9                                 NEG     CX
[ 371]    0410:                                       not_minus:
[ 372]        :                                       
[ 373]    0410: 5E                                    POP     SI
[ 374]    0411: 58                                    POP     AX
[ 375]    0412: 5A                                    POP     DX
[ 376]    0413: C3                                    RET
[ 377]    0414: 00                                    make_minus      DB      ?       ; used as a flag.
[ 378]        :                                       SCAN_NUM        ENDP
[ 379]        :                                       
[ 380]        :                                       
[ 381]        :                                       
[ 382]        :                                       
[ 383]        :                                       
[ 384]        :                                       ; this procedure prints number in AX,
[ 385]        :                                       ; used with PRINT_NUM_UNS to print signed numbers:
[ 386]    0415:                                       PRINT_NUM       PROC    NEAR
[ 387]    0415: 52                                    PUSH    DX
[ 388]    0416: 50                                    PUSH    AX
[ 389]        :                                       
[ 390]    0417: 3D 00 00                              CMP     AX, 0
[ 391]    041A: 75 0A                                 JNZ     not_zero
[ 392]        :                                       
[ 393]    041C: 50 B0 30 B4 0E CD 10 58               PUTC    '0'
[ 394]    0424: EB 12                                 JMP     printed
[ 395]        :                                       
[ 396]    0426:                                       not_zero:
[ 397]        :                                       ; the check SIGN of AX,
[ 398]        :                                       ; make absolute if it's negative:
[ 399]    0426: 3D 00 00                              CMP     AX, 0
[ 400]    0429: 79 0A                                 JNS     positive
[ 401]    042B: F7 D8                                 NEG     AX
[ 402]        :                                       
[ 403]    042D: 50 B0 2D B4 0E CD 10 58               PUTC    '-'
[ 404]        :                                       
[ 405]    0435:                                       positive:
[ 406]    0435: E8 03 00                              CALL    PRINT_NUM_UNS
[ 407]    0438:                                       printed:
[ 408]    0438: 58                                    POP     AX
[ 409]    0439: 5A                                    POP     DX
[ 410]    043A: C3                                    RET
[ 411]        :                                       PRINT_NUM       ENDP
[ 412]        :                                       
[ 413]        :                                       
[ 414]        :                                       
[ 415]        :                                       ; this procedure prints out an unsigned
[ 416]        :                                       ; number in AX (not just a single digit)
[ 417]        :                                       ; allowed values are from 0 to 65535 (FFFF)
[ 418]    043B:                                       PRINT_NUM_UNS   PROC    NEAR
[ 419]    043B: 50                                    PUSH    AX
[ 420]    043C: 53                                    PUSH    BX
[ 421]    043D: 51                                    PUSH    CX
[ 422]    043E: 52                                    PUSH    DX
[ 423]        :                                       
[ 424]        :                                       ; flag to prevent printing zeros before number:
[ 425]    043F: B9 01 00                              MOV     CX, 1
[ 426]        :                                       
[ 427]        :                                       ; (result of "/ 10000" is always less or equal to 9).
[ 428]    0442: BB 10 27                              MOV     BX, 10000       ; 2710h - divider.
[ 429]        :                                       
[ 430]        :                                       ; AX is zero?
[ 431]    0445: 3D 00 00                              CMP     AX, 0
[ 432]    0448: 74 32                                 JZ      print_zero
[ 433]        :                                       
[ 434]    044A:                                       begin_print:
[ 435]        :                                       
[ 436]        :                                       ; check divider (if zero go to end_print):
[ 437]    044A: 83 FB 00                              CMP     BX,0
[ 438]    044D: 74 35                                 JZ      end_print
[ 439]        :                                       
[ 440]        :                                       ; avoid printing zeros before number:
[ 441]    044F: 83 F9 00                              CMP     CX, 0
[ 442]    0452: 74 04                                 JE      calc
[ 443]        :                                       ; if AX<BX then result of DIV will be zero:
[ 444]    0454: 3B C3                                 CMP     AX, BX
[ 445]    0456: 72 14                                 JB      skip
[ 446]    0458:                                       calc:
[ 447]    0458: B9 00 00                              MOV     CX, 0   ; set flag.
[ 448]        :                                       
[ 449]    045B: BA 00 00                              MOV     DX, 0
[ 450]    045E: F7 F3                                 DIV     BX      ; AX = DX:AX / BX   (DX=remainder).
[ 451]        :                                       
[ 452]        :                                       ; print last digit
[ 453]        :                                       ; AH is always ZERO, so it's ignored
[ 454]    0460: 04 30                                 ADD     AL, 30h    ; convert to ASCII code.
[ 455]    0462: 50 8A C0 B4 0E CD 10 58               PUTC    AL
[ 456]        :                                       
[ 457]        :                                       
[ 458]    046A: 8B C2                                 MOV     AX, DX  ; get remainder from last div.
[ 459]        :                                       
[ 460]    046C:                                       skip:
[ 461]        :                                       ; calculate BX=BX/10
[ 462]    046C: 50                                    PUSH    AX
[ 463]    046D: BA 00 00                              MOV     DX, 0
[ 464]    0470: 8B C3                                 MOV     AX, BX
[ 465]    0472: 2E F7 36 89 04                        DIV     CS:ten  ; AX = DX:AX / 10   (DX=remainder).
[ 466]    0477: 8B D8                                 MOV     BX, AX
[ 467]    0479: 58                                    POP     AX
[ 468]        :                                       
[ 469]    047A: EB CE                                 JMP     begin_print
[ 470]        :                                       
[ 471]    047C:                                       print_zero:
[ 472]    047C: 50 B0 30 B4 0E CD 10 58               PUTC    '0'
[ 473]        :                                       
[ 474]    0484:                                       end_print:
[ 475]        :                                       
[ 476]    0484: 5A                                    POP     DX
[ 477]    0485: 59                                    POP     CX
[ 478]    0486: 5B                                    POP     BX
[ 479]    0487: 58                                    POP     AX
[ 480]    0488: C3                                    RET
[ 481]        :                                       PRINT_NUM_UNS   ENDP
[ 482]        :                                       
[ 483]        :                                       
[ 484]        :                                       
[ 485]    0489: 0A 00                                 ten             DW      10      ; used as multiplier/divider by SCAN_NUM & PRINT_NUM_UNS.
[ 486]        :                                       
[ 487]        :                                       
[ 488]        :                                       
[ 489]        :                                       
[ 490]        :                                       
[ 491]        :                                       
[ 492]        :                                       
[ 493]    048B:                                       GET_STRING      PROC    NEAR
[ 494]    048B: 50                                    PUSH    AX
[ 495]    048C: 51                                    PUSH    CX
[ 496]    048D: 57                                    PUSH    DI
[ 497]    048E: 52                                    PUSH    DX
[ 498]        :                                       
[ 499]    048F: B9 00 00                              MOV     CX, 0                   ; char counter.
[ 500]        :                                       
[ 501]    0492: 83 FA 01                              CMP     DX, 1                   ; buffer too small?
[ 502]    0495: 76 3C                                 JBE     empty_buffer            ;
[ 503]        :                                       
[ 504]    0497: 4A                                    DEC     DX                      ; reserve space for last zero.
[ 505]        :                                       
[ 506]        :                                       
[ 507]        :                                       ;============================
[ 508]        :                                       ; Eternal loop to get
[ 509]        :                                       ; and processes key presses:
[ 510]        :                                       
[ 511]    0498:                                       wait_for_key:
[ 512]        :                                       
[ 513]    0498: B4 00                                 MOV     AH, 0                   ; get pressed key.
[ 514]    049A: CD 16                                 INT     16h
[ 515]        :                                       
[ 516]    049C: 3C 0D                                 CMP     AL, 0Dh                  ; 'RETURN' pressed?
[ 517]    049E: 74 30                                 JZ      exit_GET_STRING
[ 518]        :                                       
[ 519]        :                                       
[ 520]    04A0: 3C 08                                 CMP     AL, 8                   ; 'BACKSPACE' pressed?
[ 521]    04A2: 75 1E                                 JNE     add_to_buffer
[ 522]    04A4: E3 F2                                 JCXZ    wait_for_key            ; nothing to remove!
[ 523]    04A6: 49                                    DEC     CX
[ 524]    04A7: 4F                                    DEC     DI
[ 525]    04A8: 50 B0 08 B4 0E CD 10 58               PUTC    8                       ; backspace.
[ 526]    04B0: 50 B0 20 B4 0E CD 10 58               PUTC    ' '                     ; clear position.
[ 527]    04B8: 50 B0 08 B4 0E CD 10 58               PUTC    8                       ; backspace again.
[ 528]    04C0: EB D6                                 JMP     wait_for_key
[ 529]        :                                       
[ 530]    04C2:                                       add_to_buffer:
[ 531]        :                                       
[ 532]    04C2: 3B CA                                 CMP     CX, DX          ; buffer is full?
[ 533]    04C4: 73 D2                                 JAE     wait_for_key    ; if so wait for 'BACKSPACE' or 'RETURN'...
[ 534]        :                                       
[ 535]    04C6: 88 05                                 MOV     [DI], AL
[ 536]    04C8: 47                                    INC     DI
[ 537]    04C9: 41                                    INC     CX
[ 538]        :                                       
[ 539]        :                                       ; print the key:
[ 540]    04CA: B4 0E                                 MOV     AH, 0Eh
[ 541]    04CC: CD 10                                 INT     10h
[ 542]        :                                       
[ 543]    04CE: EB C8                                 JMP     wait_for_key
[ 544]        :                                       ;============================
[ 545]        :                                       
[ 546]    04D0:                                       exit_GET_STRING:
[ 547]        :                                       
[ 548]        :                                       ; terminate by null:
[ 549]    04D0: C6 05 00                              MOV     [DI], 0
[ 550]        :                                       
[ 551]    04D3:                                       empty_buffer:
[ 552]        :                                       
[ 553]    04D3: 5A                                    POP     DX
[ 554]    04D4: 5F                                    POP     DI
[ 555]    04D5: 59                                    POP     CX
[ 556]    04D6: 58                                    POP     AX
[ 557]    04D7: C3                                    RET
[ 558]        :                                       GET_STRING      ENDP
[ 559]        :                                       
[ 560]        :                                       
[ 561]        :                                       
[ 562]        :                                       
[ 563]        :                                       
[ 564]        :                                       
[ 565]        :                                       
[ 566]        :                                       
[ 567]        :                                       
 
===================================================================================================
 




===================================================================================================
