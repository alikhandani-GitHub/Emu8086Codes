EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
binarysearch-4.com -- emu8086 assembler version: 4.08  
 
[ 02/12/2022  --  05:15:04 È.Ù ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ; You may customize this and other start-up templates;
[   3]        :                                       ; The location of this template is c:\emu8086\inc\0_com_template.txt
[   4]        :                                       
[   5]        :                                       org 100h
[   6]        :                                       
[   7]        :                                       ; add your code here
[   8]        :                                       
[   9]    0100:                                       BIN_SEARCH PROC
[  10]        :                                       ;search in a sorted array by the binary search method
[  11]        :                                       ;input: SI = array offset address
[  12]        :                                       ;       BX = number of elements
[  13]        :                                       ;       CX = key
[  14]        :                                       ;output: SI = offset of sorted array
[  15]        :                                       ;        AX = pos @where key has been found
[  16]        :                                       ;PUSH AX
[  17]    0100: 53                                    PUSH BX
[  18]    0101: 51                                    PUSH CX
[  19]    0102: 52                                    PUSH DX
[  20]    0103: 56                                    PUSH SI
[  21]    0104: 57                                    PUSH DI
[  22]        :                                       
[  23]        :                                       
[  24]    0105: 8B D3                                 MOV DX,BX   ; DX = rIndex
[  25]    0107: 4A                                    DEC DX
[  26]    0108: BB 00 00                              MOV BX,0    ; BX = lIndex
[  27]        :                                       
[  28]        :                                       
[  29]    010B:                                       @START_BIN_SEARCH: ; BX=l,AX=m,DX=r
[  30]    010B: 3B DA                                 CMP BX,DX ; exit when lIndex > rIndex
[  31]    010D: 7F 1E                                 JG @NOT_FOUND_BIN_SEARCH
[  32]    010F: 8B C3                                 MOV AX,BX
[  33]    0111: 03 C2                                 ADD AX,DX ; AX=BX+DX
[  34]    0113: D1 E8                                 SHR AX,1 ; AX = midIndex ; m=(l+r)/2
[  35]        :                                       
[  36]        :                                       ;MOV SI,AX
[  37]        :                                       ;ADD SI,SI
[  38]    0115: 8B FE                                 MOV DI,SI
[  39]    0117: 03 F8                                 ADD DI,AX
[  40]    0119: 03 F8                                 ADD DI,AX
[  41]    011B: 3B 0D                                 CMP CX,[DI]
[  42]    011D: 74 13                                 JE @FOUND_BIN_SEARCH
[  43]    011F: 7F 02                                 JG @BIG_PIVOT_BIN_SEARCH
[  44]    0121: EB 05                                 JMP @SMALL_PIVOT_BIN_SEARCH
[  45]        :                                       
[  46]    0123:                                       @BIG_PIVOT_BIN_SEARCH:
[  47]    0123: 40                                    INC AX
[  48]    0124: 8B D8                                 MOV BX,AX ; l=m+1
[  49]    0126: EB E3                                 JMP @START_BIN_SEARCH
[  50]        :                                       
[  51]    0128:                                       @SMALL_PIVOT_BIN_SEARCH:
[  52]    0128: 48                                    DEC AX
[  53]    0129: 8B D0                                 MOV DX,AX ; r=m-1
[  54]    012B: EB DE                                 JMP @START_BIN_SEARCH
[  55]        :                                       
[  56]        :                                       
[  57]    012D:                                       @NOT_FOUND_BIN_SEARCH:
[  58]    012D: B8 FF FF                              MOV AX,-1
[  59]    0130: EB 02                                 JMP @END_BIN_SEARCH
[  60]        :                                       
[  61]    0132:                                       @FOUND_BIN_SEARCH: ; index already in AX
[  62]        :                                       ;ADD AL,01
[  63]    0132: EB 00                                 JMP @END_BIN_SEARCH
[  64]        :                                       
[  65]        :                                       
[  66]    0134:                                       @END_BIN_SEARCH:
[  67]    0134: 5F                                    POP DI
[  68]    0135: 5E                                    POP SI
[  69]    0136: 5A                                    POP DX
[  70]    0137: 59                                    POP CX
[  71]    0138: 5B                                    POP BX
[  72]        :                                       ;POP AX
[  73]    0139: C3                                    RET
[  74]        :                                       BIN_SEARCH ENDP
[  75]        :                                       
[  76]    013A: C3                                    ret
[  77]        :                                       
[  78]        :                                       
[  79]        :                                       
[  80]        :                                       
[  81]        :                                       
[  82]        :                                       
 
===================================================================================================
 




===================================================================================================
